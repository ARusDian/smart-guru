"use client"

import Head from "next/head";
import { use, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Image from "next/image";

class Soal {
    public pertanyaan: string = "";
    public pilihan: Array<{
        value: string,
        content: string
    }> = [];
    public jawaban: {
        value: string,
        content: string
    } = {
            value: "",
            content: ""
        };

    Soal(pertanyaan: string, pilihan: Array<{
        value: string,
        content: string
    }>, jawaban: {
        value: string,
        content: string
    }) {
        this.pertanyaan = pertanyaan;
        this.pilihan = pilihan;
        this.jawaban = jawaban;
    }
}

const ScoreComponent = ({ answers, questions }: { answers: any[], questions: Soal[] }) => {
    const truePoint = answers.filter((item, i) => {
        return questions[i].jawaban.value === item;
    }).length;
    const score = truePoint / answers.length * 100;
    const falsePoint = answers.length - truePoint;
    return (
        <div className="mt-2">
            <div className="text-xl font-semibold flex justify-center">
                <p>HASIL PENGERJAAN</p>
            </div>
            <div className="flex justify-between">
                <div className="text-lg text-gray-500">Jumlah Soal</div>
                <div className="text-lg text-gray-500">{answers.length}</div>
            </div>
            <div className="flex justify-between">
                <div className="text-lg text-gray-500">Jawaban Benar</div>
                <div className="text-lg text-green-500">{truePoint}</div>
            </div>
            <div className="flex justify-between">
                <div className="text-lg text-gray-500">Jawaban Salah</div>
                <div className="text-lg text-red-500">{falsePoint}</div>
            </div>
            <div className="flex justify-between">
                <div className="text-lg text-gray-500">Skor</div>
                <div className="text-lg text-sky-500 font-semibold">{score.toFixed(2)}</div>
            </div>
        </div >
    )
}

export default function pengerjaan() {
    const [questions, setQuestions] = useState<Soal[]>([]);

    const [answers, setAnswers] = useState<any[]>([]);

    const [modalOpen, setModalOpen] = useState<boolean>(false);

    const router = useRouter();
    useEffect(() => {
        const soalList: Soal[] = [];
        const rawSoal = JSON.parse(localStorage.getItem("soal") || "[]");
        rawSoal.forEach((element: any) => {
            const soalTemp = new Soal();
            soalTemp.pertanyaan = element.soal;
            soalTemp.pilihan = element.pilihan;
            soalTemp.jawaban = element.jawaban;
            soalList.push(soalTemp);
        });
        setQuestions(soalList)
        setAnswers(new Array(soalList.length));
    }, [])

    return (
        <div className="h-full bg-white">
            <Head>
                <title>Pengerjaan Soal</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/Icon-ITK.png" />
            </Head>
            <div className="p-5">
                <div className="flex justify-center text-black">
                    <div className="w-4/5">
                        <div className="flex flex-col gap-5">
                            <div className="flex justify-center">
                                <Image
                                    src="/Logo-ITK.jpg"
                                    alt="Logo ITK"
                                    height={200}
                                    width={200}
                                />
                            </div>
                            <div className="text-2xl font-bold mx-auto">
                                PENGERJAAN SOAL
                            </div>
                            <form className="border-t-2 pt-4">
                                {questions.map((question, i) => {
                                    return (
                                        <div key={i} className="flex flex-col mt-3">
                                            <div>
                                                <span className="font-semibold text-lg">{i + 1}.</span> {question.pertanyaan}
                                            </div>
                                            <div className="flex flex-col gap-1">
                                                {question.pilihan.map((item, j) => {
                                                    return (
                                                        <div key={j} className="flex gap-3">
                                                            <input type="radio" name={question.pertanyaan} value={item.value}
                                                                onChange={(e) => {
                                                                    const temp = answers;
                                                                    temp[i] = e.target.value;
                                                                    setAnswers(temp);
                                                                }}
                                                            />
                                                            <label htmlFor={item.value}>{item.value}. {item.content}</label>
                                                        </div>
                                                    )
                                                })}
                                            </div>
                                        </div>
                                    )
                                })}
                                <div className="flex justify-center">
                                    <button
                                        className="bg-yellow-500 text-white hover:bg-yellow-600 py-3 px-5 rounded-lg text-md font-semibold m-5 mt-10 w-1/2"
                                        onClick={(e) => {
                                            e.preventDefault();
                                            console.log(answers);
                                            setModalOpen(true);
                                        }}
                                    >
                                        Submit
                                    </button>
                                </div>
                            </form>
                        </div>
                        <div className={`fixed z-10 inset-0 overflow-y-auto ${modalOpen ? "block" : "hidden"}`}>
                            <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                                <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                                    <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
                                </div>
                                <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
                                <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-5xl sm:w-full">
                                    <div className="bg-white px-5 pt-5 pb-4 sm:p-6 sm:pb-4">
                                        <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex flex-col gap-3">
                                            <ScoreComponent answers={answers} questions={questions} />
                                            <div className="mt-2 border-t py-3">
                                                <h3 className="text-lg leading-6 font-medium text-gray-900 my-3">
                                                    Kunci Jawaban
                                                </h3>
                                                <p className="text-lg text-gray-500 flex flex-col gap-4">
                                                    {questions.map((item, i) => {
                                                        const userAnswer = item.pilihan.filter((iter => {
                                                            return iter.value === answers[i];
                                                        }));
                                                        return (
                                                            <div key={i} className={`${userAnswer[0]?.value === item.jawaban.value ? "bg-green-100" : "bg-red-100"} p-2 rounded-md`}>
                                                                <p>{i + 1}. {item.pertanyaan}</p>
                                                                <p className="">Jawaban Benar <span className="font-semibold">{item.jawaban.value}. {item.jawaban.content} </span></p>
                                                                <p className="text-gray-500">
                                                                    Jawaban Anda: <span className="font-semibold">{userAnswer[0] ? `${userAnswer[0].value}. ${userAnswer[0].content}` : "Belum Menjawab"}</span>
                                                                </p>
                                                                <p className={`${userAnswer[0]?.value === item.jawaban.value ? "text-green-600" : "text-red-600"}`}>
                                                                    {userAnswer[0]?.value === item.jawaban.value ? "Benar" : "Salah"}
                                                                </p>
                                                            </div>
                                                        )
                                                    }
                                                    )}
                                                </p>
                                            </div>
                                            <div className="flex justify-around text-lg border-t pt-3">
                                                <button
                                                    type="button"
                                                    className="inline-flex justify-center px-10 py-2 font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500"
                                                    onClick={() => {
                                                        setModalOpen(false);
                                                    }}
                                                >
                                                    Tutup
                                                </button>
                                                <button
                                                    type="button"
                                                    className="inline-flex justify-center px-10 py-2 font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500"
                                                    onClick={() => {
                                                        router.push('/')
                                                    }}
                                                >
                                                    Kembali
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
